<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Lab 1: Introduction to LabVIEW</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m19837</md:content-id>
  <md:title>Lab 1: Introduction to LabVIEW</md:title>
  <md:abstract/>
  <md:uuid>aeec99e1-5caf-4ca2-a245-67f8c457056d</md:uuid>
</metadata>

<content>
    <para id="id48035700">The objective of this lab is to offer an initial hands-on experience in building a VI. More detailed explanations of the LabVIEW features mentioned here can be found in the <link target-id="Ref1" document="m31521"/>, <link target-id="Ref2" document="m31521"/>, and <link target-id="Ref3" document="m31521"/>. One can launch LabVIEW 2011 (the latest version at the time of this publication) by double-clicking on the LabVIEW 2011 icon, which opens the dialog window shown in <link target-id="id47726537"/>.</para><figure id="id47726537"><media id="id45590598" alt=""><image src="../../media/figure 1-16.png" mime-type="image/png" height="607" width="704"/></media><caption>Starting LabVIEW</caption></figure><section id="element-623"><title>Building a Simple VI</title>


    <para id="id47726577">To become familiar with the LabVIEW programming environment, let us calculate the sum and average of two input values in the following step-by-step example. </para>
    <section id="id47726587">
      <title>Sum and Average VI Example Using Graphical Programming </title>
      <para id="id48036112">To create a new VI, click on the Blank VI under New, as shown in <link target-id="id48036187"/>. This can also be done by choosing <emphasis>File </emphasis><emphasis>→</emphasis><emphasis> New VI</emphasis> from the menu. As a result, a blank front panel and a blank block diagram window appear, see <link target-id="id48036187"/>. Remember that a front panel and block diagram coexist when one builds a VI, meaning that every VI will have both a front panel and an associated block diagram. </para>
      <figure id="id48036187"><media id="id45590712" alt=""><image src="../../media/figure 1-17.png" mime-type="image/png" height="388" width="566"/></media><caption>Blank VI</caption></figure><para id="id48040153">The number of VI inputs and outputs is dependent on the VI function. In this example, two inputs and two outputs are needed, one output generating the sum and the other generating the average of two input values. Create the inputs by locating two numeric controls on the front panel. This can be done by right-clicking on an open area of the front panel to bring up the <term>Controls</term><term> palette</term>, followed by choosing <emphasis>Controls </emphasis><emphasis>→</emphasis><emphasis> Modern </emphasis><emphasis>→</emphasis><emphasis> Numeric </emphasis><emphasis>→</emphasis><emphasis> Numeric Control</emphasis>. Each numeric control automatically places a corresponding terminal icon on the block diagram. Double-clicking on a numeric control highlights its counterpart on the block diagram and vice versa.</para>
      <para id="id47714575">Next, label the two inputs as x and y using the Labeling tool from the <term>Tools Palette</term>, which can be displayed by choosing <emphasis>View </emphasis><emphasis>→</emphasis><emphasis> Tools Palette</emphasis> from the menu bar. Choose the Labeling tool and click on the default labels, <term>Numeric</term> and <term>Numeric 2</term>, to edit them. Alternatively, if the automatic tool selection mode is enabled by clicking <term>Automatic Tool Selection</term> in the <term>Tools</term><term> Palette</term>, the labels can be edited by simply double-clicking on the default labels. Editing a label on the front panel changes its corresponding terminal icon label on the block diagram and vice versa.</para>
      <para id="id48040373">Similarly, the outputs are created by locating two numeric indicators <emphasis>(</emphasis><emphasis>Controls </emphasis><emphasis>→</emphasis><emphasis> Modern </emphasis><emphasis>→</emphasis><emphasis> Numeric </emphasis><emphasis>→</emphasis><emphasis>Numeric Indicator</emphasis><emphasis>)</emphasis> on the front panel. Each numeric indicator automatically places a corresponding terminal icon on the block diagram. Edit the labels of the indicators to read “Sum“ and “Average.”</para>
      <para id="id47718722">For a better visual appearance, one can align, distribute and resize objects on a front panel window using the front panel toolbar. To do this, select the objects to be aligned or distributed and apply the appropriate option from the toolbar menu. <link target-id="id47718754"/> shows the configuration of the front panel just created.</para>
      <para id="id47718747">
        <figure id="id47718754"><media id="id45642865" alt=""><image src="../../media/Lab01_03.png" mime-type="image/png" height="288" width="325"/></media><caption>Front Panel Configuration</caption></figure>
      </para>
      
      <para id="id48038847">Now build a graphical code on the block diagram to perform the summation and averaging operations. Note that &lt;Ctrl-E&gt; toggles between a front panel and a block diagram window. If objects on a block diagram are too close to insert other functions or VIs in-between, one can insert a horizontal or vertical space by holding down the &lt;Ctrl&gt; key to create space horizontally and/or vertically. As an example,  <link target-id="id48038890"/>b illustrates a horizontal space inserted between the objects shown in  <link target-id="id47718754"/>a.</para>
      <figure id="id48038890"><media id="id45591187" alt=""><image src="../../media/graphics2-a192.png" mime-type="image/png" height="315" width="657"/></media><caption>Inserting Horizontal/Vertical Space: (a) Creating Space While Holding Down the &lt;Ctrl&gt; Key, (b) Inserted Horizontal Space.</caption></figure>
      
      <para id="id48038921">Next, place an <term>Add</term> function <emphasis>(</emphasis><emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Express </emphasis><emphasis>→</emphasis><emphasis>Arith &amp; Compar </emphasis><emphasis>→</emphasis><emphasis>Express Numeric </emphasis><emphasis>→</emphasis><emphasis>Add</emphasis><emphasis>)</emphasis> and a <term>Divide</term> function <emphasis>(</emphasis><emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Express </emphasis><emphasis>→</emphasis><emphasis>Arith &amp; Comp </emphasis><emphasis>→</emphasis><emphasis>Express Numeric </emphasis><emphasis>→</emphasis><emphasis>Divide</emphasis><emphasis>)</emphasis> on the block diagram. Enter the divisor, in this case 2, in a <term>Numeric Constant</term><emphasis>(</emphasis><emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Express </emphasis><emphasis>→</emphasis><emphasis>Arith &amp; Compar </emphasis><emphasis>→</emphasis><emphasis>Express Numeric </emphasis><emphasis>→</emphasis><emphasis>Numeric Constant</emphasis><emphasis>)</emphasis> and connect it to the y terminal of the <term>Divide</term> function using the Wiring tool.</para><para id="id48033842">To achieve proper data flow, wire functions, structures and terminal icons on a block diagram using the Wiring tool. To wire these objects, point the Wiring tool at the terminal of the function or subVI to be wired, left-click on the terminal, drag the mouse to a destination terminal and left-click once again. <link target-id="id48030375"/> illustrates the wires placed between the terminals of the numeric controls and the input terminals of the <term>Add</term> function. Notice that the label of a terminal gets displayed whenever one moves the cursor over the terminal if the automatic tool selection mode is enabled. Also, note that the <term>Run</term> button <media id="id45537436" alt=""><image src="../../media/Fig_run_button.png" mime-type="image/png" height="22" width="23"/></media> on the toolbar remains broken until one completes the wiring process.</para>
      <figure id="id48030375"><media id="id45537469" alt=""><image src="../../media/Lab01_04.png" mime-type="image/png" height="288" width="325"/></media><caption>Wiring Block Diagram Objects.</caption></figure>
      
      <para id="id47724550">For better block diagram readability, one can clean up wires hidden behind objects or crossed over other wires by right-clicking on them and choosing <term>Clean Up Wire</term> from the shortcut menu. Any broken wires can be cleared by pressing &lt;Ctrl-B&gt; or <emphasis>Edit </emphasis><emphasis>→</emphasis><emphasis>Remove Broken Wires</emphasis>.</para>
      <para id="id47724606">To view or hide the label of a block diagram object, such as a function, right-click on the object and check (or uncheck) <emphasis>Visible Items </emphasis><emphasis>→</emphasis><emphasis>Label</emphasis> from the shortcut menu. Also, one can show a terminal icon corresponding to a numeric control or indicator as a data type terminal icon by right-clicking on the terminal icon and unchecking <term>View As Icon</term> from the shortcut menu. <link target-id="id48035161"/> shows an example where the numeric controls and indicators are depicted as data type terminal icons. The notation DBL indicates double precision data type.</para>
      <figure id="id48035161"><media id="id45537604" alt=""><image src="../../media/graphics3-d7df.png" mime-type="image/png" height="306" width="379"/></media><caption>Completed Block Diagram.</caption></figure>
      
      <para id="id48035190">It is worth noting that there is a shortcut to build the above VI. Instead of choosing the numeric controls, indicators or constants from the Controls or Functions palette, one can use the shortcut menu <term>Create</term>, activated by right-clicking on a terminal of a block diagram object such as a function or a subVI. As an example of this approach, create a blank VI and locate an <term>Add</term> function. Right-click on its x terminal and choose <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Control</emphasis> from the shortcut menu to create and wire a numeric control or input. This locates a numeric control on the front panel as well as a corresponding terminal icon on the block diagram. The label is automatically set to x. Create a second numeric control by right-clicking on the y terminal of the <term>Add</term> function. Next, right-click on the output terminal of the <term>Add</term> function and choose <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Indicator</emphasis> from the shortcut menu. A data type terminal icon, labeled as x+y, is created on the block diagram as well as a corresponding numeric indicator on the front panel.</para>
      <para id="id47723914">Next, right-click on the y terminal of the <term>Divide</term> function to choose <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Constant</emphasis> from the shortcut menu. This creates a numeric constant as the divisor and wires its y terminal. Type the value 2 in the numeric constant. Right-click on the output terminal of the <term>Divide</term> function, labeled as x/y, and choose <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Indicator</emphasis> from the shortcut menu. If the wrong option is chosen, the terminal does not get wired. An incorrect terminal option can easily be changed by right-clicking on the terminal and choosing <term>Change to Control</term> from the shortcut menu. </para>
      <para id="id48034658">To save the created VI for later use, choose <emphasis>File </emphasis><emphasis>→</emphasis><emphasis>Save</emphasis> from the menu or press &lt;Ctrl-S&gt; to bring up a dialog window to enter a name. Type “Sum and Average” as the VI name and click <term>Save</term>.</para>
      <para id="id48034719">To test the functionality of the VI, enter some sample values in the numeric controls on the front panel and run the VI by choosing <emphasis>Operate </emphasis><emphasis>→</emphasis><emphasis>Run</emphasis>, by pressing &lt;Ctrl-R&gt; or by clicking the <term>Run</term> button on the toolbar. From the displayed output values in the numeric indicators, the functionality of the VI can be verified. <link target-id="id47717765"/> illustrates the outcome after running the VI with two inputs, 10 and 15.</para>
      <figure id="id47717765"><media id="id45529676" alt=""><image src="../../media/graphics5-d736.png" mime-type="image/png" height="314" width="347"/></media><caption>VI Verification</caption></figure>
</section>
</section>
      
<section id="id47717794"> <title>SubVI Creation</title>
      <para id="id47717798">If it is desired to use a VI as part of a higher-level VI, one needs to configure its connector pane. A connector pane assigns inputs and outputs of a subVI to its terminals through which data are exchanged.</para><para id="id48039636">The default pattern of a connector pane is determined based on the number of controls and indicators. In general, the terminals on the left side of a connector pane pattern are used for inputs and the ones on the right side for outputs. One can add terminals to or remove them from a connector pane by right-clicking and choosing <term>Add Terminal</term> or <term>Remove Terminal</term> from the shortcut menu. If the number of inputs/outputs or the distribution of terminals are changed, the connector pane pattern can be replaced with a new one by right-clicking and choosing <term>Patterns</term> from the shortcut menu. Once a pattern is selected, one needs to reassign each terminal to a control or an indicator by using the Wiring tool or by enabling the automatic tool selection mode.</para>
      <para id="id48040834"><link target-id="id48040857"/>a illustrates how to assign a Sum and Average VI terminal to a numeric control. The completed connector pane is shown in <link target-id="id48040857"/>b. Notice that the output terminals have thicker borders. The color of a terminal reflects its data type.</para>
      <figure id="id48040857"><media id="id45529823" alt=""><image src="../../media/graphics6.jpg" mime-type="image/jpeg" height="319" width="621"/></media><caption>Connector Pane: (a) Assigning a Terminal to a Control, (b) Completed Terminal Assignment.</caption></figure>
      
      <para id="id47711875">Considering that a subVI icon is displayed on the block diagram of a higher-level VI, it is important to edit the subVI icon for it to be explicitly identifiable. Double-clicking on the top-right corner icon of a block diagram opens the Icon Editor. The Icon Editor tools are similar to those in other graphical editors, such as Microsoft Paint. Editing the Sum and Average VI icon is illustrated in <link target-id="id47711900"/>.</para>
      <figure id="id47711900"><media id="id45529883" alt=""><image src="../../media/figure 1-24.png" mime-type="image/png" height="271" width="463"/></media><caption>Editing SubVI Icon.</caption></figure><para id="id47711929">A subVI can also be created from a section of a VI. To do so, select the nodes on the block diagram to be included in the subVI, as shown in <link target-id="id47727230"/>a. Then, choose <emphasis>Edit </emphasis><emphasis>→</emphasis><emphasis>Create SubVI</emphasis> to insert a new subVI icon. <link target-id="id47727230"/>b illustrates the block diagram with an inserted subVI. One can open and edit this subVI by double-clicking on its icon on the block diagram. Save this subVI as <emphasis>Sum and Average.vi</emphasis>. This subVI performs the same function as the original Sum and Average VI.</para>
      <figure id="id47727230"><media id="id45529971" alt=""><image src="../../media/graphics7-2ca1.png" mime-type="image/png" height="280" width="572"/></media><caption>Creating a SubVI: (a) Selecting Nodes to Make a SubVI, (b) Inserted SubVI Icon.</caption></figure>
      
</section>
      <section id="id47727260"> <title>Using Structures and SubVIs</title>
      <para id="id47727265">Now let us consider another example to understand the use of structures and subVIs. In this example, we use a VI to show the sum and average of two input values, which are altered in a continuous fashion. If the average of the two inputs becomes greater than a preset threshold value, a LED warning light turns on.</para>
      <para id="id47727278">First, build a front panel as shown in <link target-id="id47727566"/>a. For the inputs, consider two <term>Knobs</term><emphasis>(</emphasis><emphasis>Controls </emphasis><emphasis>→</emphasis><emphasis>Modern </emphasis><emphasis>→</emphasis><emphasis>Numeric </emphasis><emphasis>→</emphasis><emphasis>Knob</emphasis><emphasis>)</emphasis>. Adjust the size of the knobs by using the Positioning tool. One can modify knob properties such as precision and data type by right-clicking and choosing <term>Properties</term> from the shortcut menu. A Knob Properties dialog box opens and an <term>Appearance</term> tab is shown by default. Edit the label of one of the knobs to read Input 1. Select the <term>Data Type</term> tab, click <term>Representation</term> and select <term>Byte</term> to change the data type from double precision to byte. One can also perform this by right-clicking on the knob and choosing <emphasis>Representation </emphasis><emphasis>→</emphasis><emphasis>Byte</emphasis> from the shortcut menu. In the <term>Data Type</term> tab, a default value needs to be specified. In this example, the default value is considered to be 0. The default value can be set by right-clicking on the control and choosing <emphasis>Data Operations </emphasis><emphasis>→</emphasis><emphasis>Make Current Value Default</emphasis> from the shortcut menu. Also, this control can be set to a default value by right-clicking and choosing <emphasis>Data Operations </emphasis><emphasis>→</emphasis><emphasis>Reinitialize to Default Value</emphasis> from the shortcut menu.</para><para id="id48031843">Label the second knob as Input 2 and repeat all the adjustments as carried out for the first knob except for the data representation part. Specify the data type of the second knob to be double precision to demonstrate the difference in the outcome. As the final front panel configuration step, align and distribute the objects using the appropriate buttons on the front panel toolbar.</para>
      <para id="id47715000">To set the outputs, locate and place a numeric indicator, a round LED <emphasis>(</emphasis><emphasis>Controls </emphasis><emphasis>→</emphasis><emphasis>Modern </emphasis><emphasis>→</emphasis><emphasis>Boolean </emphasis><emphasis>→</emphasis><emphasis>Round LED</emphasis><emphasis>)</emphasis> and a gauge <emphasis>(</emphasis><emphasis>Controls </emphasis><emphasis>→</emphasis><emphasis>Modern </emphasis><emphasis>→</emphasis><emphasis>Numeric </emphasis><emphasis>→</emphasis><emphasis>Gauge</emphasis><emphasis>)</emphasis>. Edit the labels of the indicators as shown in <link target-id="id47727566"/>.</para>
      <para id="id47727560">
        <figure id="id47727566"><media id="id45499183" alt=""><image src="../../media/graphics8-cc91.png" mime-type="image/png" height="362" width="562"/></media><caption>Example of Structure and SubVI: (a) Front Panel, (b) Block Diagram.</caption></figure>
      </para>
      
      
      <para id="id47725407">Locate a <term>Greater or Equal?</term> function from <emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Programming </emphasis><emphasis>→</emphasis><emphasis>Comparison </emphasis><emphasis>→</emphasis><emphasis>Greater or Equal?</emphasis> to compare the average output of the subVI with a threshold value. Create a wire branch on the wire between the Average terminal of the subVI and its indicator via the Wiring tool. Then, extend this wire to the x terminal of the Greater or Equal? function. Right-click on the y terminal of the Greater or Equal? function and choose <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Constant</emphasis> to place a numeric constant. Enter 9 in the numeric constant and wire the round LED, labeled as Warning, to the x&gt;=y? terminal of this function to provide a Boolean value.</para>
      <para id="id47727044">To run the VI continuously, use a while loop structure. Choose <emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Programming </emphasis><emphasis>→</emphasis><emphasis>Structures </emphasis><emphasis>→</emphasis><emphasis>While Loop</emphasis>to create a <term>while loop</term>. Change the size by dragging the mouse to enclose the objects in the <term>while loop</term>, as illustrated in <link target-id="id48032148"/>.</para>
      <figure id="id48032148"><media id="id45499402" alt=""><image src="../../media/Lab01_24.png" mime-type="image/png" height="423" width="334"/></media><caption>While Loop Enclosure.</caption></figure>
      
      
      <para id="id47713547">Once this structure is created, its boundary, together with the loop iteration terminal <media id="id45499446" alt=""><image src="../../media/Fig_index_i.png" mime-type="image/png" height="17" width="17"/></media> and conditional terminal <media id="id45499468" alt=""><image src="../../media/Fig_stop_button.png" mime-type="image/png" height="17" width="17"/></media>, get shown on the block diagram. If one creates the <term>while loop</term> by using <emphasis>Functions </emphasis><emphasis>→</emphasis><emphasis>Programming </emphasis><emphasis>→</emphasis><emphasis>Structures </emphasis><emphasis>→</emphasis><emphasis> While Loop</emphasis>, the <term>Stop</term> button is not included as part of the structure. One can create this button by right-clicking on the conditional terminal and choosing <emphasis>Create </emphasis><emphasis>→</emphasis><emphasis>Control</emphasis> from the shortcut menu. It is possible to wire a Boolean condition to a conditional terminal, instead of a <term>Stop</term> button, to stop the loop programmatically.</para>
      <para id="id48035427">Next run the VI to verify its functionality. After clicking the Run button on the toolbar, adjust the knobs to alter the inputs. Verify whether the average and sum are displayed correctly in the gauge and numeric indicators. Note that only integer values can be entered via the Input 1 knob while real values can be entered via the Input 2 knob. This is due to the data types associated with these knobs. The Input 1 knob is set to byte type, in other words, I8 or 8-bit signed integer. As a result, one can enter only integer values within the range -128 and 127. Considering that the minimum and maximum values of this knob are set to 0 and 10, respectively, one can enter only integer values from 0 to 10 for this input. </para>
      <figure id="id48035484"><media id="id45499622" alt=""><image src="../../media/Lab01_25.png" mime-type="image/png" height="423" width="336"/></media><caption>Front Panel as VI Runs.</caption></figure>
      
      
    </section>
    <section id="id47723609">
      <title>Debugging VIs: Probe Tool</title>
      <para id="id47723621">Use the Probe tool to observe data that are being passed while a VI is running. A probe can be placed on a wire by using the Probe tool or by right-clicking on a wire and choosing <term>Probe</term> from the shortcut menu. Probes can also be placed while a VI is running.</para>
      <para id="id47724083">Placing probes on wires creates probe windows through which one can observe intermediate values. As an example of using custom probes, use four probe windows at the probe locations 1 through 4 in the Sum and Average VI to probe the values at those locations. These probes and their locations are illustrated in <link target-id="id47724107"/>.</para>
      <figure id="id47724107"><media id="id45499722" alt=""><image src="../../media/graphics9-933d.png" mime-type="image/png" height="494" width="567"/></media><caption>Probe Tool.</caption></figure>
      
    </section>
    <section id="id47724137">
      <title>Profile Tool</title>
      <para id="id48037867">With the Profile tool, one can gather timing and memory usage information. Make sure to stop the VI before selecting <emphasis>Tools </emphasis><emphasis>→</emphasis><emphasis>Profile </emphasis><emphasis>→</emphasis><emphasis>Performance and Memory</emphasis> to open a Profile window.</para>
      <para id="id48037931">Place a checkmark in the <term>Timing Statistics</term> checkbox to display timing statistics of the VI. The <term>Timing Details</term> option offers more detailed VI statistics such as drawing time. To profile memory usage as well as timing, check the <term>Memory Usage</term> checkbox after checking the <term>Profile Memory Usage</term> checkbox. Note that this option can slow down VI execution. Start profiling by clicking the <term>Start</term> button on the profiler, then run the VI. Obtain a snapshot of the profiler information by clicking on the <term>Snapshot</term> button. After viewing the timing information, click the <term>Stop</term> button. The profile statistics can be stored in a text file by clicking the <term>Save</term> button.</para>
      <para id="id47725836">An outcome of the profiler is shown in <link target-id="id47725873"/> after running the Sum and Average or L1.1 VI. <link document="m31521" target-id="Ref1"/> provides more details on the Profile tool.</para>
      <figure id="id47725873"><media id="id45499928" alt=""><image src="../../media/graphics10-eab9.png" mime-type="image/png" height="368" width="735"/></media><caption>Profile Window after Running Sum and Average VI.</caption></figure>
      
</section>
<section id="id47715776"><title>Lab Exercises</title><exercise id="element-698"><problem id="id45499986">
		<para id="id47715781"> Build a VI to compute the variance of an array 
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>x</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{x} {}</m:annotation></m:semantics></m:math>. The variance 
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>σ</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{σ} {}</m:annotation></m:semantics></m:math> is defined as:</para>
<equation id="eq1">
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mrow><m:mrow><m:mi>σ</m:mi><m:mo stretchy="false">=</m:mo><m:mfrac><m:mn>1</m:mn><m:mi>N</m:mi></m:mfrac></m:mrow><m:mrow><m:munderover><m:mo stretchy="false">∑</m:mo><m:mstyle fontsize="8pt"><m:mrow><m:mrow><m:mi>j</m:mi><m:mo stretchy="false">=</m:mo><m:mn>1</m:mn></m:mrow></m:mrow></m:mstyle><m:mstyle fontsize="8pt"><m:mrow><m:mi>N</m:mi></m:mrow></m:mstyle></m:munderover><m:mrow><m:mo stretchy="false">(</m:mo><m:mrow><m:msub><m:mi>x</m:mi><m:mstyle fontsize="8pt"><m:mrow><m:mi>j</m:mi></m:mrow></m:mstyle></m:msub><m:mo stretchy="false">−</m:mo><m:mi>μ</m:mi></m:mrow><m:msup><m:mo stretchy="false">)</m:mo><m:mstyle fontsize="8pt"><m:mrow><m:mn>2</m:mn></m:mrow></m:mstyle></m:msup></m:mrow></m:mrow></m:mrow></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{σ= {  {1}  over  {N} }  Sum cSub { size 8{j=1} }  cSup { size 8{N} }  { \( x rSub { size 8{j} }  - μ \)  rSup { size 8{2} } } } {}</m:annotation></m:semantics></m:math>   
</equation>


<para id="id48035924">where
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>μ</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{μ} {}</m:annotation></m:semantics></m:math>denotes the average of the array x. For x, use all the integers from 1 to 1000.</para>
	</problem>
	<solution id="id45500177">
		<para id="element-672">
    Insert Solution Text Here
  </para>
	</solution>
</exercise><exercise id="ex2">
	<problem id="id45500206">
		<para id="id47712847">Build a VI to check whether a given positive integer 
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>n</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{n} {}</m:annotation></m:semantics></m:math> is a prime number and display a warning message if it is not a prime number.</para>
	</problem>
	<solution id="id45500243">
		<para id="element-673">
    Insert Solution Text Here
  </para>
	</solution>
</exercise><exercise id="ex3">
	<problem id="id45500272">
		<para id="id47712905">Build a VI to generate the first 
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>N</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{N} {}</m:annotation></m:semantics></m:math>prime numbers and store them using an indexing array. Display the outcome.</para>
	</problem>
	<solution id="id45500309">
		<para id="element-674">
    Insert Solution Text Here
  </para>
	</solution>
</exercise>
<exercise id="ex4"> 	<problem id="id45500339">
<para id="id47716493"> Build a VI to sort 
<m:math><m:semantics><m:mrow><m:mstyle fontsize="12pt"><m:mrow><m:mi>N</m:mi></m:mrow></m:mstyle><m:mrow/></m:mrow><m:annotation encoding="StarMath 5.0"> size 12{N} {}</m:annotation></m:semantics></m:math> integer numbers (positive or negative) in ascending or descending order.</para>
</problem>
<solution id="id45500376">
		<para id="element-675">
    Insert Solution Text Here
  </para>
	</solution>
</exercise>
</section>
  </content>

</document>